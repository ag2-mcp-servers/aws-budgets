# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:51:34+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query

from models import (
    AccessDeniedException,
    CreateBudgetActionRequest,
    CreateBudgetActionResponse,
    CreateBudgetRequest,
    CreateBudgetResponse,
    CreateNotificationRequest,
    CreateNotificationResponse,
    CreateSubscriberRequest,
    CreateSubscriberResponse,
    CreationLimitExceededException,
    DeleteBudgetActionRequest,
    DeleteBudgetActionResponse,
    DeleteBudgetRequest,
    DeleteBudgetResponse,
    DeleteNotificationRequest,
    DeleteNotificationResponse,
    DeleteSubscriberRequest,
    DeleteSubscriberResponse,
    DescribeBudgetActionHistoriesRequest,
    DescribeBudgetActionHistoriesResponse,
    DescribeBudgetActionRequest,
    DescribeBudgetActionResponse,
    DescribeBudgetActionsForAccountRequest,
    DescribeBudgetActionsForAccountResponse,
    DescribeBudgetActionsForBudgetRequest,
    DescribeBudgetActionsForBudgetResponse,
    DescribeBudgetNotificationsForAccountRequest,
    DescribeBudgetNotificationsForAccountResponse,
    DescribeBudgetPerformanceHistoryRequest,
    DescribeBudgetPerformanceHistoryResponse,
    DescribeBudgetRequest,
    DescribeBudgetResponse,
    DescribeBudgetsRequest,
    DescribeBudgetsResponse,
    DescribeNotificationsForBudgetRequest,
    DescribeNotificationsForBudgetResponse,
    DescribeSubscribersForNotificationRequest,
    DescribeSubscribersForNotificationResponse,
    DuplicateRecordException,
    ExecuteBudgetActionRequest,
    ExecuteBudgetActionResponse,
    ExpiredNextTokenException,
    InternalErrorException,
    InvalidNextTokenException,
    InvalidParameterException,
    NotFoundException,
    ResourceLockedException,
    ThrottlingException,
    UpdateBudgetActionRequest,
    UpdateBudgetActionResponse,
    UpdateBudgetRequest,
    UpdateBudgetResponse,
    UpdateNotificationRequest,
    UpdateNotificationResponse,
    UpdateSubscriberRequest,
    UpdateSubscriberResponse,
    XAmzTarget,
    XAmzTarget1,
    XAmzTarget2,
    XAmzTarget3,
    XAmzTarget4,
    XAmzTarget5,
    XAmzTarget6,
    XAmzTarget7,
    XAmzTarget8,
    XAmzTarget9,
    XAmzTarget10,
    XAmzTarget11,
    XAmzTarget12,
    XAmzTarget13,
    XAmzTarget14,
    XAmzTarget15,
    XAmzTarget16,
    XAmzTarget17,
    XAmzTarget18,
    XAmzTarget19,
    XAmzTarget20,
    XAmzTarget21,
    XAmzTarget22,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='<p>Use the Amazon Web Services Budgets API to plan your service usage, service costs, and instance reservations. This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for the Amazon Web Services Budgets feature. </p> <p>Budgets provide you with a way to see the following information:</p> <ul> <li> <p>How close your plan is to your budgeted amount or to the free tier limits</p> </li> <li> <p>Your usage-to-date, including how much you\'ve used of your Reserved Instances (RIs)</p> </li> <li> <p>Your current estimated charges from Amazon Web Services, and how much your predicted usage will accrue in charges by the end of the month</p> </li> <li> <p>How much of your budget has been used</p> </li> </ul> <p>Amazon Web Services updates your budget status several times a day. Budgets track your unblended costs, subscriptions, refunds, and RIs. You can create the following types of budgets:</p> <ul> <li> <p> <b>Cost budgets</b> - Plan how much you want to spend on a service.</p> </li> <li> <p> <b>Usage budgets</b> - Plan how much you want to use one or more services.</p> </li> <li> <p> <b>RI utilization budgets</b> - Define a utilization threshold, and receive alerts when your RI usage falls below that threshold. This lets you see if your RIs are unused or under-utilized.</p> </li> <li> <p> <b>RI coverage budgets</b> - Define a coverage threshold, and receive alerts when the number of your instance hours that are covered by RIs fall below that threshold. This lets you see how much of your instance usage is covered by a reservation.</p> </li> </ul> <p>Service Endpoint</p> <p>The Amazon Web Services Budgets API provides the following endpoint:</p> <ul> <li> <p>https://budgets.amazonaws.com</p> </li> </ul> <p>For information about costs that are associated with the Amazon Web Services Budgets API, see <a href="https://aws.amazon.com/aws-cost-management/pricing/">Amazon Web Services Cost Management Pricing</a>.</p>',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='AWS Budgets',
    version='2016-10-20',
    servers=[
        {
            'description': 'The general AWSBudgets multi-region endpoint',
            'url': 'https://budgets.amazonaws.com',
            'variables': {},
        },
        {
            'description': 'The AWSBudgets endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://budgets.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The AWSBudgets endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://budgets.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.CreateBudget',
    description=""" <p>Creates a budget and, if included, notifications and subscribers. </p> <important> <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_CreateBudget.html#API_CreateBudget_Examples">Examples</a> section. </p> </important> """,
    tags=['budget_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_budget(
    x__amz__target: XAmzTarget = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateBudgetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.CreateBudgetAction',
    description="""  Creates a budget action.  """,
    tags=['budget_management', 'budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_budget_action(
    x__amz__target: XAmzTarget1 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateBudgetActionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.CreateNotification',
    description=""" Creates a notification. You must create the budget before you create the associated notification. """,
    tags=['notification_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_notification(
    x__amz__target: XAmzTarget2 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateNotificationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.CreateSubscriber',
    description=""" Creates a subscriber. You must create the associated budget and notification before you create the subscriber. """,
    tags=['subscriber_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_subscriber(
    x__amz__target: XAmzTarget3 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateSubscriberRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DeleteBudget',
    description=""" <p>Deletes a budget. You can delete your budget at any time.</p> <important> <p>Deleting a budget also deletes the notifications and subscribers that are associated with that budget.</p> </important> """,
    tags=['budget_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_budget(
    x__amz__target: XAmzTarget4 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteBudgetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DeleteBudgetAction',
    description="""  Deletes a budget action.  """,
    tags=['budget_management', 'budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_budget_action(
    x__amz__target: XAmzTarget5 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteBudgetActionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DeleteNotification',
    description=""" <p>Deletes a notification.</p> <important> <p>Deleting a notification also deletes the subscribers that are associated with the notification.</p> </important> """,
    tags=['notification_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_notification(
    x__amz__target: XAmzTarget6 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteNotificationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DeleteSubscriber',
    description=""" <p>Deletes a subscriber.</p> <important> <p>Deleting the last subscriber to a notification also deletes the notification.</p> </important> """,
    tags=['subscriber_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_subscriber(
    x__amz__target: XAmzTarget7 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteSubscriberRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudget',
    description=""" <p>Describes a budget.</p> <important> <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudget.html#API_DescribeBudget_Examples">Examples</a> section. </p> </important> """,
    tags=['budget_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_budget(
    x__amz__target: XAmzTarget8 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeBudgetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgetAction',
    description="""  Describes a budget action detail.  """,
    tags=['budget_management', 'budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_budget_action(
    x__amz__target: XAmzTarget9 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeBudgetActionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgetActionHistories',
    description="""  Describes a budget action history detail.  """,
    tags=['budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_budget_action_histories(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget10 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeBudgetActionHistoriesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgetActionsForAccount',
    description="""  Describes all of the budget actions for an account.  """,
    tags=['budget_management', 'budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_budget_actions_for_account(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget11 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeBudgetActionsForAccountRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgetActionsForBudget',
    description="""  Describes all of the budget actions for a budget.  """,
    tags=['budget_management', 'budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_budget_actions_for_budget(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget12 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeBudgetActionsForBudgetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgetNotificationsForAccount',
    description="""  Lists the budget names and notifications that are associated with an account.  """,
    tags=['budget_management', 'notification_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_budget_notifications_for_account(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget13 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeBudgetNotificationsForAccountRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgetPerformanceHistory',
    description=""" Describes the history for <code>DAILY</code>, <code>MONTHLY</code>, and <code>QUARTERLY</code> budgets. Budget history isn't available for <code>ANNUAL</code> budgets. """,
    tags=['budget_management', 'budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_budget_performance_history(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget14 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeBudgetPerformanceHistoryRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgets',
    description=""" <p>Lists the budgets that are associated with an account.</p> <important> <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudgets.html#API_DescribeBudgets_Examples">Examples</a> section. </p> </important> """,
    tags=['budget_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_budgets(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget15 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeBudgetsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeNotificationsForBudget',
    description=""" Lists the notifications that are associated with a budget. """,
    tags=['budget_management', 'notification_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_notifications_for_budget(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget16 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeNotificationsForBudgetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.DescribeSubscribersForNotification',
    description=""" Lists the subscribers that are associated with a notification. """,
    tags=['notification_management', 'subscriber_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_subscribers_for_notification(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget17 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeSubscribersForNotificationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.ExecuteBudgetAction',
    description="""  Executes a budget action.  """,
    tags=['budget_management', 'budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def execute_budget_action(
    x__amz__target: XAmzTarget18 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ExecuteBudgetActionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.UpdateBudget',
    description=""" <p>Updates a budget. You can change every part of a budget except for the <code>budgetName</code> and the <code>calculatedSpend</code>. When you modify a budget, the <code>calculatedSpend</code> drops to zero until Amazon Web Services has new usage data to use for forecasting.</p> <important> <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_UpdateBudget.html#API_UpdateBudget_Examples">Examples</a> section. </p> </important> """,
    tags=['budget_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_budget(
    x__amz__target: XAmzTarget19 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UpdateBudgetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.UpdateBudgetAction',
    description="""  Updates a budget action.  """,
    tags=['budget_management', 'budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_budget_action(
    x__amz__target: XAmzTarget20 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UpdateBudgetActionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.UpdateNotification',
    description=""" Updates a notification. """,
    tags=['notification_management', 'budget_action_recording'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_notification(
    x__amz__target: XAmzTarget21 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UpdateNotificationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSBudgetServiceGateway.UpdateSubscriber',
    description=""" Updates a subscriber. """,
    tags=['subscriber_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_subscriber(
    x__amz__target: XAmzTarget22 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UpdateSubscriberRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
